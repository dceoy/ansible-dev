" vim: set ft=vim et tw=78 sw=2:

"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=$HOME/.vim/bundles/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('$HOME/.vim/bundles')
  call dein#begin('$HOME/.vim/bundles')

  " Required:
  call dein#add('$HOME/.vim/bundles/repos/github.com/Shougo/dein.vim')

  " plugins:
  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')
  call dein#add('Shougo/neocomplete.vim')
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
  call dein#add('Shougo/vimshell.vim')
  call dein#add('Shougo/unite.vim')
  call dein#add('Shougo/vimfiler.vim')

  " vim-scripts repos
  call dein#add('vim-scripts/L9')                         " some utility functions and commands for programming in vim
  call dein#add('vim-scripts/FuzzyFinder')                " buffer/file/command/tag/etc explorer with fuzzy matching
  " screen
  call dein#add('altercation/vim-colors-solarized')       " precision colorscheme for the vim text editor
  call dein#add('tyru/open-browser.vim')                  " open uri with your favorite browser from your favorite editor
  " syntax
  call dein#add('scrooloose/syntastic')                   " syntax checking hacks for vim
  "call dein#add('elzr/vim-json')                          " a better json for vim
  " edit
  "call dein#add('AndrewRadev/switch.vim')                 " switch segments of text with predefined replacements
  " surroundings
  call dein#add('tpope/vim-surround')                     " quoting/parenthesizing made simple
  call dein#add('vim-scripts/matchit.zip')                " extended % matching for html, latex, and many other languages
  " run
  call dein#add('thinca/vim-quickrun')                    " run commands quickly
  " file
  call dein#add('kien/ctrlp.vim')                         " fuzzy file, buffer, mru, tag, etc finder
  call dein#add('scrooloose/nerdtree')                    " a tree explorer plugin for vim
  " Git
  call dein#add('tpope/vim-fugitive')                     " a git wrapper so awesome, it should be illegal
  "call dein#add('airblade/vim-gitgutter')                 " plugin which shows a git diff in the gutter (sign column)
  " YAML
  call dein#add('ingydotnet/yaml-vim')                    " yaml highlight script for vim
  " TOML
  call dein#add('cespare/vim-toml')                       " vim syntax for toml
  " Crontab
  call dein#add('vim-scripts/crontab.vim')                " syntax highlight for crontab files
  " HTML
  call dein#add('mattn/emmet-vim')                        " emmet for vim
  call dein#add('othree/html5.vim')                       " html5 omnicomplete and syntax
  call dein#add('slim-template/vim-slim')                 " a clone of the slim vim plugin from stonean
  call dein#add('tpope/vim-haml')                         " vim runtime files for haml, sass, and scss
  call dein#add('plasticboy/vim-markdown')                " syntax highlighting, matching rules and mappings for markdown
  call dein#add('Rykka/riv.vim')                          " plugin for rst
  " CSS
  call dein#add('hail2u/vim-css3-syntax')                 " add css3 syntax support to vim's built-in `syntax/css.vim`
  call dein#add('cakebaker/scss-syntax.vim')              " vim syntax file for scss
  call dein#add('vim-scripts/csslint.vim')                " css code quality tool
  call dein#add('groenewege/vim-less')                    " syntax for less (dynamic css)
  " JavaScript
  call dein#add('pangloss/vim-javascript')                " vastly improved Javascript indentation and syntax support in vim
  call dein#add('othree/javascript-libraries-syntax.vim') " syntax for javascript libraries
  call dein#add('vim-scripts/lint.vim')                   " jshint integration with quickfix window
  call dein#add('kchmck/vim-coffee-script')               " coffeescript support for vim
  call dein#add('leafgarland/typescript-vim')             " typescript syntax files for vim
  " Ruby
  call dein#add('vim-ruby/vim-ruby')                      " vim/ruby configuration files
  call dein#add('vim-scripts/rails.vim')                  " ruby on rails: easy file navigation, enhanced syntax highlighting, and more
  call dein#add('tpope/vim-rails')                        " ruby on rails power tools
  call dein#add('tpope/vim-endwise')                      " wisely add 'end' in ruby, endfunction/endif/more in vim script, etc
  " Python
  call dein#add('vim-scripts/python.vim')                 " a set of menus/shortcuts to work with python files
  call dein#add('vim-scripts/python.vim--Vasiliev')       " enhanced version of the python syntax highlighting script
  call dein#add('nvie/vim-flake8')                        " a static syntax and style checker for python source code
  call dein#add('hynek/vim-python-pep8-indent')           " a nicer python indentation style for vim
  " R
  call dein#add('vim-scripts/R-syntax-highlighting')      " r syntax highlighting
  " BUGS
  "call dein#add('vim-scripts/BUGS-language')              " bugs syntax highlighting
  " Stan
  call dein#add('maverickg/stan.vim')                     " syntax highlighting for stan modeling lauguage
  " SAS
  "call dein#add('EricGebhart/SAS-Vim')                    " syntax and indention for sas
  " Haskell
  call dein#add('vim-scripts/haskell.vim')                " syntax highlight for haskell
  " Scala
  call dein#add('vim-scripts/scala.vim')                  " syntaxic coloration for scala code
  call dein#add('vim-scripts/snipMate')                   " textmate-style snippets for vim
  " Go
  call dein#add('fatih/vim-go')                           " go development plugin for vim
  " Rust
  call dein#add('rust-lang/rust.vim')                     " vim configuration for rust
  " Elixir
  call dein#add('elixir-lang/vim-elixir')                 " vim configuration files for elixir
  " Julia
  call dein#add('JuliaLang/julia-vim')                    " vim support for julia
  " SQL
  call dein#add('vim-scripts/sql.vim--Stinson')           " better sql syntax
  " Docker
  call dein#add('ekalinin/Dockerfile.vim')                " syntax file and snippets for docker's dockerfile
  " Nginx
  call dein#add('chr4/nginx.vim')                         " nginx syntax highlighting
  " Bats
  call dein#add('vim-scripts/bats.vim')                   " syntax highlighting for bats

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------


"neocomplete Scripts-------------------------
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"End neocomplete Scripts-------------------------


" general
set history=256                             " number of lines of history to remember
set scrolloff=16                            " minimal number of screen lines to keep above and below the cursor
"set clipboard=unnamed,autoselect            " share clipboard
set ttyfast                                 " fast terminal connection
set t_Co=256                                " enable 256 colors

" theme/colors
syntax enable
set background=dark
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

" files/backups
set browsedir=buffer                        " put up a directory requester
set autoread                                " read changes automatically
set autowrite                               " save automatically before commands like :next and :make
set fileformats=unix,mac,dos                " give the eol formats
set nobackup                                " make no backup file
set noswapfile                              " make no swap file

" ui
set linespace=0                             " number of pixel lines inserted between characters
set wildmenu wildmode=longest:full,full     " command-line completion operates in an enhanced mode
set showcmd                                 " display an incomplete command in statusline
set ruler                                   " show the line and column number of the cursor position
set cmdheight=2                             " number of screen lines to use for the command-line
set number                                  " show the line number in front of each line
set cursorline                              " highlight the screen line of the cursor
set lazyredraw                              " don't redraw while running macros (much faster) (LazyRedraw)
set backspace=start,eol,indent              " make backspace work normal
set whichwrap=b,s,h,l,<,>,[,],~             " allow backspace and cursor keys to cross line boundaries
"set mouse=a                                 " use mouse everywhere
"set ttymouse=xterm2                         " terminal type for which mouse codes are to be recognized
set shortmess=atI                           " shorten messages to avoid 'press a key' prompt
set report=0                                " tell us when any line is changed via : commands
set noerrorbells                            " don't make noise on error messages
set novisualbell                            " don't blink
"
" visual cues
set showmatch                               " show matching brackets for a moment
set matchtime=2                             " blink brackets
set hlsearch                                " highlight searched phrases
set incsearch                               " highlight as you type you search phrase
nmap <Esc><Esc> :nohlsearch<CR><Esc>
set wrapscan                                " search wrap around the end of the file
set ignorecase                              " ignore case sensitivity on search patterns
set smartcase                               " case insensitive searches become sensitive with capitals
set list listchars=eol:\ ,tab:>-,trail:_,extends:>,precedes:<       " show invisible chars
au BufNewFile,BufRead *.go set nolist
set display=lastline                                                " display as much as possible of the last line in a window
set display+=uhex                                                   " show unprintable characters hexadecimal
set laststatus=2                                                    " always show the status line
set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %F    " determines the content of the status line
set statusline+=%=%{fugitive#statusline()}\ %1l/%L,%c%V\ %P
set ambiwidth=double                        " understand double-byte chars
set formatoptions=lmoq                      " add multi-byte chars to options
set spelllang+=cjk                          " exclude jp from spell check
au BufNewFile,BufRead *.md,*.txt set spell  " check spelling
hi ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /　/

" text formatting/layout
set autoindent                              " take indent for new line from previous line
set cindent                                 " do c-style indenting
set expandtab                               " replace tabs with ${tabstop} spaces
set tabstop=2 shiftwidth=2 softtabstop=0    " set tabstop, shiftwidth, softtabstop
au BufNewFile,BufRead *.py set ts=4 sw=4 sts=0
set smarttab                                " sw at the start of the line, sts everywhere else
set textwidth=0                             " don't wrap lines by default
set modeline                                " read modelines

" search for visually selected text
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>

" enable :DiffOrig
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif

" flake8
let g:syntastic_python_checkers = ['flake8']                  " use flake8
"let g:syntastic_python_flake8_args = '--max-line-length=100'  " permit long lines

" disable folding in markdown or rest
let g:vim_markdown_folding_disabled = 1
let g:riv_disable_folding = 1
