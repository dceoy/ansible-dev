scriptencoding utf-8

"dein Scripts-----------------------------
if &compatible
  " vint: -ProhibitSetNoCompatible
  set nocompatible
endif

" Required:
set runtimepath+=$HOME/.vim/bundles/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.vim/bundles')
  call dein#begin('~/.vim/bundles')
  call dein#add('~/.vim/bundles')

  " Required:
  call dein#add('Shougo/deoplete.nvim')
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif
  let g:deoplete#enable_at_startup = 1

  call dein#add('Shougo/neosnippet.vim')
  call dein#add('Shougo/neosnippet-snippets')
  call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
  call dein#add('Shougo/vimshell.vim')
  call dein#add('Shougo/unite.vim')
  call dein#add('Shougo/vimfiler.vim')

  " vim-scripts repos
  call dein#add('vim-scripts/L9')                         " some utility functions and commands for programming in vim
  call dein#add('vim-scripts/FuzzyFinder')                " buffer/file/command/tag/etc explorer with fuzzy matching
  " screen
  call dein#add('altercation/vim-colors-solarized')       " precision colorscheme for the vim text editor
  call dein#add('tyru/open-browser.vim')                  " open uri with your favorite browser from your favorite editor
  " syntax
  call dein#add('scrooloose/syntastic')                   " syntax checking hacks for vim
  "call dein#add('elzr/vim-json')                          " a better json for vim
  " edit
  "call dein#add('AndrewRadev/switch.vim')                 " switch segments of text with predefined replacements
  " surroundings
  call dein#add('tpope/vim-surround')                     " quoting/parenthesizing made simple
  call dein#add('vim-scripts/matchit.zip')                " extended % matching for html, latex, and many other languages
  " run
  call dein#add('thinca/vim-quickrun')                    " run commands quickly
  " file
  call dein#add('kien/ctrlp.vim')                         " fuzzy file, buffer, mru, tag, etc finder
  call dein#add('scrooloose/nerdtree')                    " a tree explorer plugin for vim
  " Git
  call dein#add('tpope/vim-fugitive')                     " a git wrapper so awesome, it should be illegal
  "call dein#add('airblade/vim-gitgutter')                 " plugin which shows a git diff in the gutter (sign column)
  " YAML
  call dein#add('ingydotnet/yaml-vim')                    " yaml highlight script for vim
  " TOML
  call dein#add('cespare/vim-toml')                       " vim syntax for toml
  " Protocol Buffers
  call dein#add('uarun/vim-protobuf')                     " vim syntax for google's protocol buffers
  " Crontab
  call dein#add('vim-scripts/crontab.vim')                " syntax highlight for crontab files
  " LaTeX
  call dein#add('vim-latex/vim-latex')                    " enhanced latex support
  " HTML
  call dein#add('mattn/emmet-vim')                        " emmet for vim
  call dein#add('othree/html5.vim')                       " html5 omnicomplete and syntax
  call dein#add('slim-template/vim-slim')                 " a clone of the slim vim plugin from stonean
  call dein#add('tpope/vim-haml')                         " vim runtime files for haml, sass, and scss
  call dein#add('plasticboy/vim-markdown')                " syntax highlighting, matching rules and mappings for markdown
  call dein#add('Rykka/riv.vim')                          " plugin for rst
  " CSS
  call dein#add('hail2u/vim-css3-syntax')                 " add css3 syntax support to vim's built-in `syntax/css.vim`
  call dein#add('cakebaker/scss-syntax.vim')              " vim syntax file for scss
  call dein#add('vim-scripts/csslint.vim')                " css code quality tool
  call dein#add('groenewege/vim-less')                    " syntax for less (dynamic css)
  " JavaScript
  call dein#add('pangloss/vim-javascript')                " vastly improved Javascript indentation and syntax support in vim
  call dein#add('othree/javascript-libraries-syntax.vim') " syntax for javascript libraries
  call dein#add('vim-scripts/lint.vim')                   " jshint integration with quickfix window
  call dein#add('kchmck/vim-coffee-script')               " coffeescript support for vim
  call dein#add('leafgarland/typescript-vim')             " typescript syntax files for vim
  " Ruby
  call dein#add('vim-ruby/vim-ruby')                      " vim/ruby configuration files
  call dein#add('vim-scripts/rails.vim')                  " ruby on rails: easy file navigation, enhanced syntax highlighting, and more
  call dein#add('tpope/vim-rails')                        " ruby on rails power tools
  call dein#add('tpope/vim-endwise')                      " wisely add 'end' in ruby, endfunction/endif/more in vim script, etc
  " Python
  call dein#add('vim-scripts/python.vim')                 " a set of menus/shortcuts to work with python files
  call dein#add('vim-scripts/python.vim--Vasiliev')       " enhanced version of the python syntax highlighting script
  call dein#add('nvie/vim-flake8')                        " a static syntax and style checker for python source code
  call dein#add('tell-k/vim-autopep8')                    " an automatic python code formatter by pep8
  call dein#add('hynek/vim-python-pep8-indent')           " a nicer python indentation style for vim
  call dein#add('ivanov/vim-ipython')                     " integration between vim and ipython
  "call dein#add('vyzyv/vimpyter')                         " edit jupyter notebooks in vim
  " R
  call dein#add('vim-scripts/R-syntax-highlighting')      " r syntax highlighting
  " BUGS
  call dein#add('vim-scripts/BUGS-language')              " bugs syntax highlighting
  " Stan
  call dein#add('maverickg/stan.vim')                     " syntax highlighting for stan modeling lauguage
  " SAS
  call dein#add('EricGebhart/SAS-Vim')                    " syntax and indention for sas
  " Haskell
  call dein#add('vim-scripts/haskell.vim')                " syntax highlight for haskell
  " Scala
  call dein#add('vim-scripts/scala.vim')                  " syntaxic coloration for scala code
  call dein#add('vim-scripts/snipMate')                   " textmate-style snippets for vim
  " Go
  call dein#add('fatih/vim-go')                           " go development plugin for vim
  " Rust
  call dein#add('rust-lang/rust.vim')                     " vim configuration for rust
  " Elixir
  call dein#add('elixir-lang/vim-elixir')                 " vim configuration files for elixir
  " Julia
  call dein#add('JuliaLang/julia-vim')                    " vim support for julia
  " SQL
  call dein#add('vim-scripts/sql.vim--Stinson')           " better sql syntax
  " Docker
  call dein#add('ekalinin/Dockerfile.vim')                " syntax file and snippets for docker's dockerfile
  " Kubernetes
  call dein#add('andrewstuart/vim-kubernetes')            " kubectl integration
  " Ansible
  call dein#add('pearofducks/ansible-vim')                " syntax highlighting Ansible's common filetypes
  " Nginx
  call dein#add('chr4/nginx.vim')                         " nginx syntax highlighting
  " Bats
  call dein#add('vim-scripts/bats.vim')                   " syntax highlighting for bats

  call dein#end()
  call dein#save_state()
endif

filetype plugin indent on
syntax enable
"End dein Scripts-------------------------


" general
set history=256                             " number of lines of history to remember
set scrolloff=16                            " minimal number of screen lines to keep above and below the cursor
"set clipboard=unnamed,autoselect            " share clipboard
set ttyfast                                 " fast terminal connection
set t_Co=256                                " enable 256 colors

" theme/colors
set background=dark
let g:solarized_termcolors=256
let g:solarized_contrast='high'
let g:solarized_visibility='high'
colorscheme solarized

" files/backups
set browsedir=buffer                        " put up a directory requester
set autoread                                " read changes automatically
set autowrite                               " save automatically before commands like :next and :make
set fileformats=unix,mac,dos                " give the eol formats
set nobackup                                " make no backup file
set noswapfile                              " make no swap file

" ui
set linespace=0                             " number of pixel lines inserted between characters
set wildmenu wildmode=longest:full,full     " command-line completion operates in an enhanced mode
set showcmd                                 " display an incomplete command in statusline
set ruler                                   " show the line and column number of the cursor position
set cmdheight=2                             " number of screen lines to use for the command-line
set number                                  " show the line number in front of each line
set cursorline                              " highlight the screen line of the cursor
set lazyredraw                              " don't redraw while running macros (much faster) (LazyRedraw)
set backspace=start,eol,indent              " make backspace work normal
set whichwrap=b,s,h,l,<,>,[,],~             " allow backspace and cursor keys to cross line boundaries
"set mouse=a                                 " use mouse everywhere
"set ttymouse=xterm2                         " terminal type for which mouse codes are to be recognized
set shortmess=atI                           " shorten messages to avoid 'press a key' prompt
set report=0                                " tell us when any line is changed via : commands
set noerrorbells                            " don't make noise on error messages
set novisualbell                            " don't blink

" visual cues
set showmatch                               " show matching brackets for a moment
set matchtime=2                             " blink brackets
set hlsearch                                " highlight searched phrases
set incsearch                               " highlight as you type you search phrase
nmap <Esc><Esc> :nohlsearch<CR><Esc>
set wrapscan                                " search wrap around the end of the file
set ignorecase                              " ignore case sensitivity on search patterns
set smartcase                               " case insensitive searches become sensitive with capitals
set list listchars=eol:\ ,tab:>-,trail:_,extends:>,precedes:<       " show invisible chars
au BufNewFile,BufRead *.go set nolist
set display=lastline                                                " display as much as possible of the last line in a window
set display+=uhex                                                   " show unprintable characters hexadecimal
set laststatus=2                                                    " always show the status line
set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %F    " determines the content of the status line
set statusline+=%=%{fugitive#statusline()}\ %1l/%L,%c%V\ %P
set ambiwidth=double                        " understand double-byte chars
set formatoptions=lmoq                      " add multi-byte chars to options
set spelllang+=cjk                          " exclude jp from spell check
au BufNewFile,BufRead *.md,*.Rmd,*.txt set spell  " check spelling
hi ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /　/

" text formatting/layout
set autoindent                              " take indent for new line from previous line
set cindent                                 " do c-style indenting
set expandtab                               " replace tabs with ${tabstop} spaces
set tabstop=2 shiftwidth=2 softtabstop=0    " set tabstop, shiftwidth, softtabstop
au BufNewFile,BufRead *.py set ts=4 sw=4 sts=0
set smarttab                                " sw at the start of the line, sts everywhere else
set textwidth=0                             " don't wrap lines by default
set modeline                                " read modelines

" search for visually selected text
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>

" enable :DiffOrig
if !exists(':DiffOrig')
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif

" syntastic
let g:syntastic_python_checkers = ['python', 'flake8']
"let g:syntastic_python_flake8_args = '--max-line-length=100'
let g:syntastic_yaml_checkers = ['yamllint']
let g:syntastic_yaml_yamllint_args = '-d "{extends: default, rules: {line-length: disable, truthy: disable}}"'
let g:syntastic_ansible_checkers = ['ansible_lint']
let g:syntastic_dockerfile_checkers= ['hadolint']
let g:syntastic_sh_checkers = ['shellcheck']
let g:syntastic_zsh_checkers = ['zsh']
let g:syntastic_enable_r_lintr_checker = 1
let g:syntastic_r_checkers = ['lintr']
let g:syntastic_rmd_checkers = ['lintr']
let g:syntastic_r_lintr_linters = 'with_defaults(object_usage_linter = NULL, single_quotes_linter = NULL, object_camel_case_linter = NULL, absolute_path_linter = NULL)'
let g:syntastic_rmd_lintr_linters = 'with_defaults(object_usage_linter = NULL, single_quotes_linter = NULL, object_camel_case_linter = NULL, absolute_path_linter = NULL)'
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_go_checkers = ['go', 'gofmt', 'golint']
let g:syntastic_vim_checkers = ['vint']
let g:syntastic_sql_checkers = ['sqlint']
let g:syntastic_markdown_checkers = ['proselint']

" jupyter
"autocmd Filetype ipynb nmap <silent><Leader>b :VimpyterInsertPythonBlock<CR>
"autocmd Filetype ipynb nmap <silent><Leader>j :VimpyterStartJupyter<CR>
"autocmd Filetype ipynb nmap <silent><Leader>n :VimpyterStartNteract<CR>

" markdown
let g:vim_markdown_folding_disabled = 1   " disable folding in markdown
let g:vim_markdown_frontmatter = 1        " highlight yaml front matter
let g:vim_markdown_toml_frontmatter = 1   " highlight toml front matter
let g:vim_markdown_math = 1               " used as $x^2$, $$x^2$$, escapable as \$x\$ and \$\$x\$\$

" rest
let g:riv_disable_folding = 1             " disable folding in rest
